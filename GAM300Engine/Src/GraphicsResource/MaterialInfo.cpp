#include <GraphicsResource/MaterialInfo.h>
#include <Serialization/JSONSerializer.h>
#include <components/CompReflectionMacro.h>
namespace TDS
{
	RTTR_REGISTRATION
	{
		RTTR_REGISTER_ENUM(MATERIALS_TEXTURE)
		(
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_DIFFUSE),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_SPECULAR),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_AMBIENT),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_EMISSIVE),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_HEIGHT),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_NORMALS),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_SHININESS),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_OPACITY),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_DISPLACEMENT),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_LIGHTMAP),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_REFLECTION),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_PBR_ALBEDO),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_PBR_NORMAL),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_PBR_EMISSION),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_PBR_METALNESS),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_PBR_ROUGHNESS),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_PBR_OCCLUSION),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_SHEEN),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_CLEARCOAT),
			RTTR_REGISTER_ENUM_VALUES(MATERIALS_TEXTURE, MATERIAL_TRANSMISSION)
		);

		RTTR_REGISTER_ENUM(SHADING_TYPE)
		(
			RTTR_REGISTER_ENUM_VALUES(SHADING_TYPE, PHONG_BLINN),
			RTTR_REGISTER_ENUM_VALUES(SHADING_TYPE, PBR)
		);

		RTTR_REGISTER(MaterialProperty)
			RTTR_REGISTER_PROPERTY(MaterialProperty, ShadingType)
			RTTR_REGISTER_PROPERTY(MaterialProperty, MatID)
			RTTR_REGISTER_PROPERTY(MaterialProperty, MaterialName)
			RTTR_REGISTER_PROPERTY(MaterialProperty, TexturesPath);


		RTTR_REGISTER(MaterialLoader)
			RTTR_REGISTER_PROPERTY(MaterialLoader, MaterialInfos);
	}

		bool MaterialProperty::Serialize(MaterialProperty& materialProperty, std::string_view path, bool read)
	{
		JSONSerializer Serializer{};

		if (Serializer.OpenData(path, read) == JSONSerializer::ERROR_TYPE::FAILED)
			return false;

		if (read)
			Serializer.StartDeserializer(&materialProperty);

		else
			Serializer.StartSerializer(&materialProperty);

		Serializer.Close(read);

		return true;
	}
	bool MaterialLoader::Serialize(MaterialLoader& materials, std::string_view path, bool read)
	{
		SerializerBase<JSONSerializer> Serializer{};

		if (Serializer.OpenData(path, read) == JSONSerializer::ERROR_TYPE::FAILED)
			return false;

		if (read)
			Serializer.StartDeserializer(&materials);

		else
			Serializer.StartSerializer(&materials);

		Serializer.CloseData(read);

		return true;

	}
}