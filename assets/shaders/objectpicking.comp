#version 450

layout (local_size_x = 1) in;

layout (binding = 9) writeonly buffer IDBuffer{
    vec4 positionWorld;
    uint id;
} buff;


layout(binding = 3) uniform usampler2D pickingTexture;

layout(push_constant) uniform Push{
    vec2 mouseCoord;
}push;

layout(binding = 5) uniform PickUBO{
    mat4 proj;
    mat4 view; 
}ubo;

bool isOutOfSamplerRange(vec2 coord){
    return coord.x > 1.0 || coord.x < 0.0 || coord.y > 1.0 || coord.y < 0.0;
}

vec3 WorldPosFromDepth(vec2 uvCoord, float depth, mat4 invProjectMatrix, mat4 invViewMatrix) {
    vec4 clipSpacePosition = vec4(uvCoord * 2.0 - 1.0, depth, 1.0);
    vec4 viewSpacePosition = invProjectMatrix * clipSpacePosition;

    viewSpacePosition /= viewSpacePosition.w;
    vec4 worldSpacePosition = invViewMatrix * viewSpacePosition;

    return worldSpacePosition.xyz;
}

vec3 WorldPosFromDepth(vec2 fragCoord, vec2 screenArea, float depth, mat4 invProjectMatrix, mat4 invViewMatrix) {
    return WorldPosFromDepth(fragCoord / screenArea, depth, invProjectMatrix, invViewMatrix);
}

void main(){
    vec2 texCoord = push.mouseCoord;
    uint objectID = uint(texture(pickingTexture, texCoord)) * uint(!isOutOfSamplerRange(texCoord));// clamp values outside of sampler to 0 (mouse is not on viewport)
    buff.id =  objectID;
}
